// Data:
//   - arrayOfPictures - 2-dimensional array of pictures: first level of array is index, second is the pictures. On a second dimension is always main picture and the rest of 8 are cluster's icons - version 2;
//   - arrayOfIndex - container to store randomly generated index.
//   - arrayOfPictures - 1-dimensiona of pictures - version 1;
//   - arrayOfTopics - 1-dimensional of topic pictures - version 1;
//   - Global flag isStartOrReset - used to check the statue of the start/reset button;
//   - Redcross wrong choice picture;
//   - Empty cell picture;


// Object structure:
//   constructor() - empty for the version 1;
//   constructor(timer, array) - empty for the version 2;
//   stepFlag - count steps;
//   progressFlag - count right answers;

//   Methods:
//     buildBoard() - triggered just right after the Start button is clicked.
//                     Generate 8 random index on the range from 1 to 16 and fill them out the this.arrayOfIndex.
//     revealBoard(arrayOfPictures) - triggered just right after the Start button is clicked. Use a global array as an argument. Assing a new background-color value from global array to
//                       the clusters with particular index numbers previously generated by buildBoard(). Use jQuery.
 //   setInterval() - stop the program flow for "time" second. Argument gets from parent method which calls it.
//    launchTimer(num) - create modal window and shows on it digits from time to 0 with interval of 1 second. To manage the
//                      time use timer method inside of the loop. Return true. As an argument accepts number(time in seconds).
//     launchTimer(num);
//     resetBoard(isBool) - triggered just right after the Reset button(start button with id='reset') is clicked or timer is run out(launchTimer(num) return value true). Turn all clusters
//                    face off on the board (assing them initial background-color value #EFE15E);
//     assignValue(isBoolStep, isBoolScore, value) - if both of the argument is true and DOM value is equal " ", assing a new background-color value to the cluster with appropriate id number. If this number is into an arrayOfIndex assign the topicPcture
//                                           from arrayPicture and assign DOM value like 1. If there is no such a value of the index into arrayOfIndex, assign a new background-color as
//                                           redCross and assign the DOM value as 0. If the DOM value is 1 increament local variables stepFlag and progressFlag. If value is 0,
//                                           increament only stepFlag.
//     EventListener for clusters -
//         checkSteps() - check if the stepFlag less than 12. If it's more than 12 return false. As an argument a function
//                       get a stepFlag;
//         checkScore() - if localFlag is less then 12 and progressFlag equals 8 return false. As an argument function get a progressFlag.
//         stopLoose(isBoolStep) - if an argument of the function false, stop listen all board clusters, call modal window LOOSER!
//         stopWin(isBoolScore) - if an argument of the function is equal false, stop listen all board clusters, call modal window WINNER!
//         assignValue(isBoolStep, isBoolScore);


//     start(isStartOrReset) {
//       if(isStartReset) {
//         buildBoard();
//         revealBoard(arrayOfPictures);
//         launchTimer(num);
//         resetBoard(isBool);
//         assignValue(isBoolStep, isBoolScore, value);
//       }
//     }
var arrayOfPictures = ['url(graph/animals/cat.png)','url(graph/animals/cow.png)','url(graph/animals/cowBrown.png)','url(graph/animals/dog.png)','url(graph/animals/duck.png)','url(graph/animals/duckChild.png)','url(graph/animals/elephan.png)','url(graph/animals/smallDuck.png)'];
var arrayOfTopics = ['graph/animals/main.png','graph/mario/mushrooms.png','graph/sh/main.png','graph/sw/main.png'];
var isStartOrReset = false;
var redCross = '#';
var emptyCell = '#';
var arrayOfIndex = [];
let num = 3;


class Game {
  constructor() {
    this.stepFlag = 0;
    this.progressFlag = 0;
    this.interFun = 0;
  }
//it works. tested. + checked for double numbers;
  buildBoard(arr1) {
      let arrLen = $('.square').length;
      while(arr1.length < 8) {
        let randomnumber = Math.ceil(Math.random() * (arrLen-1));
        if(arr1.indexOf(randomnumber) > -1) continue;
        arr1[arr1.length] = randomnumber;
      }
    };
//it works. tested.
  revealBoard(arr1, arr2) {
      $('.square').each(function(index, el) {
         $(el).css("background", "lightgreen");
         $.each(arr1, function(ind, item) {
            if($(el).attr('id') == item) {
                $(el).css("background", "lightgreen");
                $(el).css("background-image", arr2[ind]);
                $(el).css("background-repeat", 'no-repeat');
            }
          });
      });
    };
//found a solution with setInterval in stackoverflow.com
  countDown () {
    function launchTimer() {
    if(num == 3) {
        $('.Winner_Looser').css('visibility', 'visible');
        $('<span>').attr('id', 'timer').appendTo($('.Winner_Looser'));
        $('#timer').css({'font-size': 400, 'color': 'white', 'font-family': 'Quicksand'});
        $('#timer').text(num);
        num--;
      } else if(num == 0) {
      clearInterval(interFun);
      $('#timer').html(' ');
      $('.Winner_Looser').css('visibility', 'hidden');
      resetBoard('.square');
    } else {
        $('#timer').text(num);
        num--;
      }
    };

  let interFun = setInterval(function() {launchTimer(num);}, 1000);

  function resetBoard(el) {
        $(el).each(function(index, el) {
        $(el).css({"background": 'url()', 'background-color': '#EFE15E'});
       }
    )}
  };
      // triggered just right after the Reset button(start button with id='reset') is clicked or timer
      // is run out(launchTimer(num) return value true). Turn all clusters
//                    face off on the board (assing them initial background-color value #EFE15E);

  start() {
      this.buildBoard(arrayOfIndex);
      this.revealBoard(arrayOfIndex, arrayOfPictures);
      this.countDown();
      // setInterval(this.resetBoard(isStartOrReset, '.square'), 3000);
    }
};



$('button').on('click', (event) => {
    const newGame = new Game();
    $('#start').text('RESET');
    isStartOrReset = true;
    newGame.start();




});







