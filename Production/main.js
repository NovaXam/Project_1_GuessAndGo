// Data:
//   - arrayOfPictures - 2-dimensional array of pictures: first level of array is index, second is the pictures. On a second dimension is always main picture and the rest of 8 are cluster's icons - version 2;
//   - arrayOfIndex - container to store randomly generated index.
//   - arrayOfPictures - 1-dimensiona of pictures - version 1;
//   - arrayOfTopics - 1-dimensional of topic pictures - version 1;
//   - Global flag isStartOrReset - used to check the statue of the start/reset button;
//   - Redcross wrong choice picture;
//   - Empty cell picture;


// Object structure:
//   constructor() - empty for the version 1;
//   constructor(timer, array) - empty for the version 2;
//   stepFlag - count steps;
//   progressFlag - count right answers;

//   Methods:
//     buildBoard() - triggered just right after the Start button is clicked.
//                     Generate 8 random index on the range from 1 to 16 and fill them out the this.arrayOfIndex.
//     revealBoard(arrayOfPictures) - triggered just right after the Start button is clicked. Use a global array as an argument. Assing a new background-color value from global array to
//                       the clusters with particular index numbers previously generated by buildBoard(). Use jQuery.
 //   setInterval() - stop the program flow for "time" second. Argument gets from parent method which calls it.
//    launchTimer(num) - create modal window and shows on it digits from time to 0 with interval of 1 second. To manage the
//                      time use timer method inside of the loop. Return true. As an argument accepts number(time in seconds).
//     launchTimer(num);
//     resetBoard(isBool) - triggered just right after the Reset button(start button with id='reset') is clicked or timer is run out(launchTimer(num) return value true). Turn all clusters
//                    face off on the board (assing them initial background-color value #EFE15E);
//     assignValue(isBoolStep, isBoolScore, value) - if both of the argument is true and DOM value is equal " ", assing a new background-color value to the cluster with appropriate id number.
                                             //If this number is into an arrayOfIndex assign the topicPcture
//                                           from arrayPicture and assign DOM value like 1. If there is no such a value of the index into arrayOfIndex, assign a new background-color as
//                                           redCross and assign the DOM value as 0. If the DOM value is 1 increament local variables stepFlag and progressFlag. If value is 0,
//                                           increament only stepFlag.
//     EventListener for clusters -
//         checkSteps() - check if the stepFlag less than 12. If it's more than 12 return false. As an argument a function
//                       get a stepFlag;
//         checkScore() - if localFlag is less then 12 and progressFlag equals 8 return false. As an argument function get a progressFlag.
//         stopLoose(isBoolStep) - if an argument of the function false, stop listen all board clusters, call modal window LOOSER!
//         stopWin(isBoolScore) - if an argument of the function is equal false, stop listen all board clusters, call modal window WINNER!
//         assignValue(isBoolStep, isBoolScore);


//     start(isStartOrReset) {
//       if(isStartReset) {
//         buildBoard();
//         revealBoard(arrayOfPictures);
//         launchTimer(num);
//         resetBoard(isBool);
//         assignValue(isBoolStep, isBoolScore, value);
//       }
//     }
const arrayOfAnimals = ['url(graph/animals/cat.png)','url(graph/animals/cow.png)','url(graph/animals/cowBrown.png)','url(graph/animals/dog.png)','url(graph/animals/duck.png)','url(graph/animals/duckChild.png)','url(graph/animals/elephan.png)','url(graph/animals/smallDuck.png)'];
const arrayOfMario = ['url(graph/mario/bananas.png)','url(graph/mario/flower.png)','url(graph/mario/medal.png)','url(graph/mario/star.png)','url(graph/mario/mushrooms.png)','url(graph/mario/tortles.png)','url(graph/mario/bubble.png)','url(graph/mario/mush.png)'];
const arrayOfStar = ['url(graph/sw/craft.png)','url(graph/sw/D2R2.png)','url(graph/sw/DWHelmet.png)','url(graph/sw/helmet.png)','url(graph/sw/impireShip.png)','url(graph/sw/spaceShip.png)','url(graph/sw/starShip.png)'];
const arrayOfHeroes = ['url(graph/sh/1.png)','url(graph/sh/2.png)','url(graph/sh/3.png)','url(graph/sh/4.png)','url(graph/sh/5.png)','url(graph/sh/6.png)','url(graph/sh/7.png)','url(graph/sh/8.png)'];
const arrayOfTopics = ['url(graph/animals/main.png)','url(graph/mario/mushrooms.png)','url(graph/sh/main.png)','url(graph/sw/main.png)'];
var isStartOrReset = false;
const questionMark = 'url(graph/questionMark.png)';
const winnerCup = 'url(graph/winnerCup.png)';
const looserCup = 'url(graph/looserCup.png)';
let arrayOfIndex = [];
let stepFlag = 0;
let progressFlag = 0;
let num = 3;
let score = 0;
let gameTop = '';

class Game {
  constructor() {
    this.interFun = 0;
  }
//it works. tested. + checked for double numbers;
  buildBoard(arr1) {
      let arrLen = $('.square').length;
      while(arr1.length < 8) {
        let randomnumber = Math.ceil(Math.random() * (arrLen-1));
        if(arr1.indexOf(randomnumber) > -1) continue;
        arr1[arr1.length] = randomnumber;
      }
    };
//it works. tested.
  revealBoard(arr1, gameTop) {
      if(gameTop === '') gameTop = arrayOfAnimals;
      $('.square').each(function(index, el) {
         $(el).css("background", "lightgreen");
         $.each(arr1, function(ind, item) {
            if($(el).attr('id') == item) {
                $(el).css("background", "lightgreen");
                $(el).css("background-image", gameTop[ind]);
                $(el).css("background-repeat", 'no-repeat');
            }
          });
      });
    };
//found a solution with setInterval in stackoverflow.com and extended it for my function. it works. tested.
//build a modal window and nests a countdown timer in here as well reset the gameboard for it initial value.
  countDown () {
    function launchTimer() {
    if(num == 3) {
        $('.Winner_Looser').css('visibility', 'visible');
        $('<span>').attr('id', 'timer').appendTo($('.Winner_Looser'));
        $('#timer').css({'font-size': 400, 'color': 'white', 'font-family': 'Quicksand'});
        $('#timer').text(num);
        num--;
      } else if(num == 0) {
      clearInterval(interFun);
      $('#timer').html(' ');
      $('.Winner_Looser').css('visibility', 'hidden');
      resetBoard('.square');
    } else {
        $('#timer').text(num);
        num--;
      }
    };

  let interFun = setInterval(function() {launchTimer(num);}, 1000);

  function resetBoard(el) {
        $(el).each(function(index, el) {
        $(el).css({"background": 'url()', 'background-color': '#EFE15E'});
       }
    )}
  };

//if a cluster wasn't clicked(DOM value is equal ""), assing a new background-color value to the cluster with
// appropriate id number. If this number is into an arrayOfIndex assign the background-color from arrayPicture and assign
//DOM value like 1. If there is no such a value of the index into an arrayOfIndex, assign a new background-color as
// questionMark and assign the DOM value as 0. If the DOM value is 1 increament local variables stepFlag and progressFlag.
// If value is 0, increament only stepFlag.
  listener() {
    $('.square').on('click', function(event) {
      let cluster = this;
      if(stepFlag < 12 && progressFlag < 8) {
           if($(cluster).text() == "") {
            if(arrayOfIndex.indexOf(parseInt($(cluster).attr('id'))) > -1) {
              $(cluster).css("background", "lightgreen");
              $(cluster).css("background-image", gameTop[arrayOfIndex.indexOf(parseInt($(cluster).attr('id')))]);
              $(cluster).css("background-repeat", 'no-repeat');
              $(cluster).text('1');
              stepFlag++;
              progressFlag++;
                if(progressFlag === stepFlag) {
                  score += 120;
                } else score += 120-((stepFlag - progressFlag)*10);
            } else {
              $(cluster).css("background", "lightgreen");
              $(cluster).css("background-image", questionMark);
              $(cluster).css("background-size", '100%');
              $(cluster).css("background-repeat", 'no-repeat');
              $(cluster).text('0');
              stepFlag++;
            }
          };
          $('#progress').children('p').text(`${progressFlag} / 8`);
          $('#score').children('p').text(`${score}`);
          $('#steps').children('p').text(`${stepFlag}`);


      } else if(stepFlag >= 12 && progressFlag < 8) {
              $('.Winner_Looser').css('visibility', 'visible');
              $('.Winner_Looser').children('span').remove();
              $('.wl').css('display', 'inline-block');
              $('#stat').text(`steps ${stepFlag} : progress ${progressFlag} score ${score}`);
              $('#cup').css('background-image', looserCup);
              $('#cup').css("background-size", '60%');
              $('#cup').css("background-repeat", 'no-repeat');
              $('#cup').css("background-position", 'center');
              $('#text').text('TRY HARDER');
              stepFlag = 0;
              progressFlag = 0;
      } else if(stepFlag < 12 && progressFlag == 8) {
              $('.Winner_Looser').css('visibility', 'visible');
              $('.Winner_Looser').children('span').remove();
              $('.wl').css('display', 'inline-block');
              $('#stat').text(`steps ${stepFlag} : progress ${progressFlag} score ${score}`);
              $('#cup').css('background-image', winnerCup);
              $('#cup').css("background-size", '65%');
              $('#cup').css("background-repeat", 'no-repeat');
              $('#cup').css("background-position", 'center');
              $('#text').text('WINNER');
              $('#text').css("font-size", '120px');
              stepFlag = 0;
              progressFlag = 0;
          }
      });
  };

//start playing game and assign the game flow logic.
  start() {
      this.buildBoard(arrayOfIndex);
      this.revealBoard(arrayOfIndex, gameTop);
      this.countDown();
      this.listener();
    }
  };

$('button').on('click', (event) => {
    if(!isStartOrReset) {
      $('#start').text('RESET')
      let newGame = new Game();
      isStartOrReset = !isStartOrReset;
      newGame.start();
    } else {
     $('#start').text('PLAY');
      location.reload();
  }
});

$('#gall').on('click', (event) => {
    $('.clusters').css({'visibility': 'hidden', 'z-index': '1'});
    $('.Gallary').css({'visibility': 'visible', 'z-index': '2'});
    $('#g1').css({'background-image': arrayOfTopics[0], 'background-size': '100%', 'background-repeat':'no-repeat'});
    $('#g2').css({'background-image': arrayOfTopics[1], 'background-size': '100%', 'background-repeat':'no-repeat'});
    $('#g3').css({'background-image': arrayOfTopics[2], 'background-size': '100%', 'background-repeat':'no-repeat'});
    $('#g4').css({'background-image': arrayOfTopics[3], 'background-size': '100%', 'background-repeat':'no-repeat'});

$('.gal').on('click', function(event) {
  if($(this).attr('id') == 'g1') {
    gameTop =  arrayOfAnimals;
    $('.clusters').css({'visibility': 'visible', 'z-index': '2'});
    $('.Gallary').css({'visibility': 'hidden', 'z-index': '1'});
  } else if($(this).attr('id') == 'g2') {
    gameTop =  arrayOfMario;
    $('.clusters').css({'visibility': 'visible', 'z-index': '2'});
    $('.Gallary').css({'visibility': 'hidden', 'z-index': '1'});
  } else if($(this).attr('id') == 'g3') {
    $('.clusters').css({'visibility': 'visible', 'z-index': '2'});
    $('.Gallary').css({'visibility': 'hidden', 'z-index': '1'});
    gameTop =  arrayOfStar;
  } else if($(this).attr('id') == 'g4') {
    $('.clusters').css({'visibility': 'visible', 'z-index': '2'});
    $('.Gallary').css({'visibility': 'hidden', 'z-index': '1'});
    gameTop = arrayOfHeroes;
    }
  });
});
