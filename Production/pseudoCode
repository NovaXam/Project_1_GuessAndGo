PSEUDO-CODE:

Game has two scope logic: global and local.
Outside: listeners for key objects of the game
Inside: environement based on class - to store the logic of the game.

Global scope spans a whole game. It has higher priority than local scope, which
means if something happens to the global scope is should be stored and used as a income data for local events.
Local scope describes a mechanic of the game and lives inside of the class.

Global elements:
  Functionalities:
  - buttons(all hover infected):
    level:
      - not active - version 1;
      - shows the drop down menu - version 2;
      - change a level of the game when pressed on particular submenu - version 2;
    gallery:
      - not active - version 1;
      - shows the drop down menu - version 2;
      - shows the topic of the board on a playground scope when pressed - version 2;
      - change the topic of the game when pressed on particular submenu. Triggers a modal window appeared on the place of playground
      with picture of a new topic  - version 2;
    instructions:
       - not active - version 1;
       - drop-down menu with a short version of instructions how to play the game - version 2;
       - shows the full version of instructions on a playground scope when pressed - version 2;
  - history:
       - not active - version 1;
       - drop-down menu with a short version of history of the game - version 2;
       - shows the full version of history on a playground scope when pressed - version 2;
  - start / reset:
       - triggers a timer and starts the game(create a new object of the class Game and call the method triggers the game logic) asa a time is runs out - version 1;
       - when pressed change itself for reset button;

Global context:
Data:
  - 2-dimensional array of pictures: first level of array is index, second is the pictures. On a second dimension is always main picture and the rest of 8 are cluster's icons - version 2;
  - arrayOfIndex - container to store randomly generated index. 1-dimensional array of pictures - version 1;
  - Global flag isStartOrReset - used to check the statue of the start/reset button;
  - Redcross wrong choice picture;
Methods:
  EventListerner for start/reset button. When it clicked create a new Object(newGame) of class Game no parameters.
                    Call the method launch the newGame.launch() with triggers the game flow;
  - buildBoard() - triggered just right after the Start button is clicked.
                   Generate 8 random index on the range from 1 to 16 and fill them out the arrayOfIndex.
  - timer() - stop the program flow for 1 second;
  - launchTimer() - create modal window and shows on it digits from 3 to 1 with interval of 1 second. To manage the
                    time use timer method inside of the loop;
  - resetBoard() - triggered just right after the Reset button is clicked or timer method is run out. Turn all clusters
                   face off on the board assing them initial background value;



Object structure:
  constructor() - empty for the version 1;
  constructor(timer, array) - empty for the version 2;
  stepFlag - count steps;
  progressFlag - count right answers;

  Methods:
    buildBoard() - triggered just right after the Start button is clicked.
                   Generate 8 random index on the range from 1 to 16 and fill them out the arrayOfIndex.
    revealBoard(arr) - triggered just right after the Start button is clicked. Use a global array as an argument. Assing a new background-color value from global array to
                      the clusters with particular index numbers previously generated by buildBoard().
    timer() - stop the program flow for 1 second;
    launchTimer() - create modal window and shows on it digits from 3 to 1 with interval of 1 second; to manage the time use timer method inside of the loop;
    resetBoard() - triggered just right after the Reset button is clicked or timer method is run out. Turn all clusters face off on the board assing them initial background value;
    EventListener for clusters - turns face on/assigns a value of the particularly clicked cluster on the board. If a cluster's id is on arrayOfIndex it's assigned with new background
                      as a picture at same time as it's assigned with a new value as 1, else assigned a value 0 and the picture of a red cross. If the value is 1. increament
                      local variables stepFlag and progressFlag. If value is 0, increament only stepFlag.
        checkSteps() - check if the stepFlag less than 12. If it's more than 12 it calls stopLoose(num). As an argument stopGame function
        get a stepFlag;
        checkScore() - if localFlag is less then 12 and progressFlag equals 8 call stopWin(num). As an argument stopGame function get a progressFlag.
        stopLoose(num) - if an argument of the function is more then 12, stop listen all board clusters, call modal window LOOSER!
        stopWin(num) - if an argument of the function is equal 8, stop listen all board clusters, call modal window WINNER!


  Create basic with method describing the  Class Game
  Class


